// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Banner {
  id          String   @id @default(cuid())
  title       String
  subtitle    String?
  description String?
  imageUrl    String
  buttonText  String?
  buttonLink  String?
  isActive    Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("banners")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  price       Decimal  @db.Decimal(10, 2)
  description String?
  categoryId  String
  gender      Gender   @default(UNISEX)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   ProductCategory @relation(fields: [categoryId], references: [id])
  images     ProductImage[]
  sizes      ProductSize[]
  cartItems  CartItem[]

  @@map("products")
}

model ProductCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("product_categories")
}

model ProductSize {
  id        String @id @default(cuid())
  productId String
  size      String // S, M, L, XL, etc.
  stock     Int    @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size])
  @@map("product_sizes")
}

model ProductImage {
  id        String  @id @default(cuid())
  productId String
  url       String
  alt       String?
  isPrimary Boolean @default(false)
  order     Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  userType  UserType @default(COMMON)
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  carts Cart[]

  @@map("users")
}

model Cart {
  id              String     @id @default(cuid())
  userId          String
  totalPrice      Decimal    @default(0) @db.Decimal(10, 2)
  appliedPromotion String?
  status          CartStatus @default(ACTIVE)
  abandonedAt     DateTime?
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]

  @@map("carts")
}

model CartItem {
  id         String  @id @default(cuid())
  cartId     String
  productId  String
  size       String  // Store the selected size
  quantity   Int     @default(1)
  unitPrice  Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("cart_items")
}

enum UserType {
  COMMON
  VIP
}

enum CartStatus {
  ACTIVE
  ABANDONED
  COMPLETED
}

enum Gender {
  MALE
  FEMALE
  UNISEX
}
